int SmartHero::findPath(GraphMap* map, int first, int second, int& tempNextMove, int& tempShortestPath){
	
	
	int numNeigh=0;
	int a=0;
	int b=0;
	int c=0;
	int d=0;
	

	int count=1;
	int p[totalVertices]; //int array indexed by vertex int = move made to get here
	int last[totalVertices]; //int array indexed by vertex int=the vertex of its predecessor 
	std::queue<int> Q;
	bool done = false;
	int neighborV;

	for(int i=0; i < this->totalVertices; i++){

	     p[i]=0;
	     last[i]=0;
	}

	int firstV = first;
	int secondV = second;
	  
	S[firstV]=1; //sets the Visited array at vertex of first to 1
	last[firstV]=firstV;
	p[firstV]=0;

	Q.push(firstV);

	while(Q.empty()==false && !done){
	    int v=Q.front();
	      
	 
	    map->getPosition(v, a, b);

	
	    numNeigh=map->getNumNeighbors( a, b );
	
	    for(int i=0; i<numNeigh && !done; i++){
 
		map->getNeighbor( a, b, i, c, d);
		neighborV=map->getVertex( c, d );
	
		if(S[neighborV]==0){
 		    for(int j= 0; j < SmartHero::numEdibles && !done; j++){   
		
		        if(SmartHero::edibles[j]==neighborV){
			     S[neighborV]=1;
		             p[neighborV]=i;
			     last[neighborV]=v;
			     done=true;
			     Q.push(neighborV);

	                }
		    }
	        }
		if(S[neighborV]==0){  //perform when neighborV first visited

		  if(neighborV==secondV){ //found the goal
		
		    done=true;
		
		  }
		     S[neighborV]=1;  //S neighborV's vertex is set to visited
		     p[neighborV]=i;  //the move to get to neighborV is now in p
		    last[neighborV]=v;  //the predecessor's vertex for neighborV is set
		    Q.push(neighborV);  
		}
		
			

	
	    }  	    //end i for loop
	    Q.pop();
	}	//end while loop meaning all possible paths were checked and second was never reached
	
	if(done==true){  // second was reached and know referenced the last temp
		
	

	    while(last[neighborV] != firstV && count < 1000){

		neighborV=last[neighborV];
		count++; 

	    }  //after this loop neighborV should be vertex of first move.

	    tempNextMove=p[neighborV];
	    tempShortestPath=count;
	    return neighborV;
	    
	}

tempNextMove=0;
tempShortestPath=9999;
return this->currentV;
}