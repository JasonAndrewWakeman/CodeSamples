// In case the database is not empty execute the following; 
// Note: Normally you do not take dropping of tables so casually ; 
// But here you will find it very convinient;  
// These commANDs will ensure that your experiment (batch of commANDs) is repetable; 
$MySQL:> connect;


$MySQL:> drop table Person;
$MySQL:> drop table Instructor;
$MySQL:> drop table Student; 
$MySQL:> drop table Course;
$MySQL:> drop table Offering;
$MySQL:> drop table Enrollment; 



// Item 1: The Person table;
$MySQL:> create table Person (Name char(20), ID char(9) not null, Address char (30), DOB date, primary key (ID));

// Item 2: The Instructor table;
$MySQL:> create table Instructor ( InstructorID char (9) not null references Person, Rank char (12), Salary int, primary key (InstructorID)); 

// Item 3: The Student table;
$MySQL:> create table Student ( StudentID char (9) not null references Person, Classification char (10), GPA double, MentorID char (9) references Instructor, CreditHours int, primary key (StudentID)); 

// Item 4: The Course table;
$MySQL:> create table Course ( CourseCode char (6) not null, CourseName char (50), PreReq char(6), primary key (CourseCode, PreReq)); 

// Item 5: The Offering table;
$MySQL:> CREATE TABLE Offering ( InstructorID CHAR (9) NOT NULL REFERENCES Instructor, CourseCode CHAR (6) NOT NULL, SectionNo INT NOT NULL, PRIMARY KEY (CourseCode, SectionNo)); 

// Item 6: The Enrollment table;
$MySQL:> CREATE TABLE Enrollment ( CourseCode CHAR(6) NOT NULL, SectionNo INT NOT NULL, StudentID CHAR(9) NOT NULL REFERENCES Student, Grade CHAR(4) NOT NULL, PRIMARY KEY (CourseCode, StudentID), ForEIGN KEY (CourseCode, SectionNo) REFERENCES Offering);

// Section 3. Bulk-load tables; 



// Now load; 

$MySQL:> load | Person | ComS363/Projects/Datasets/University_Dataset.xml;
$MySQL:> load | Instructor | ComS363/Projects/Datasets/University_Dataset.xml;
$MySQL:> load | Student | ComS363/Projects/Datasets/University_Dataset.xml;
$MySQL:> load | Course | ComS363/Projects/Datasets/University_Dataset.xml;
$MySQL:> load | Offering | ComS363/Projects/Datasets/University_Dataset.xml;
$MySQL:> load | Enrollment | ComS363/Projects/Datasets/University_Dataset.xml;



// Section 3. Check loaded tables; 

//Item 13:  juniors AND seniors cum laude ids with mentor ids;
$MySQL:> SELECT s.StudentID, s.MentorID
 FROM Student s 
 WHERE s.GPA >3.8
  AND (s.Classification = "Junior" 
 or s.Classification = "Senior");



//Item 14: Courses being taken by sophomores;
$MySQL:> select distinct e.Coursecode, e.SectionNO
FROM Enrollment e
WHERE e.studentID in(SELECT s.StudentID 
          FROM Student s
          WHERE s.Classification = "sophomore");



//Item 15: names AND salaries of freshmen' mentors;
$MySQL:> SELECT  p.name, i.salary 
FROM Person p, Instructor i
WHERE p.ID = i.InstructorID
AND p.ID  in (SELECT s.MentorID
          FROM Student s
          WHERE s.Classification = "freshman");

//Item 16 total number of all instructors' salaries who are not offering any couse;
$MySQL:> SELECT  sum(i.Salary) 
FROM  Instructor i
WHERE i.InstructorID
        NOT IN (SELECT o.InstructorID
          FROM Offering o);

//Item 17: names AND birthdays  of students born in '76;
$MySQL:> SELECT  p.Name, p.DOB
FROM  Person p
WHERE p.ID
          IN (SELECT s.StudentID
          FROM Student s)
AND
         Year(p.DOB) = 1976;

//Item 18: names AND rank of instructors who don't menotr or teach;
$MySQL:> SELECT  p.Name, i.Rank
FROM  Person p, Instructor i
WHERE p.ID = i.InstructorID
AND
         p.ID
          NOT IN (SELECT o.InstructorID
          FROM Offering o)
AND
       p.ID
          NOT IN (SELECT s.MentorID
          FROM Student s);



//Item 19: Find the IDs Names AND DOB of the youngest student(s);
$MySQL:> SELECT  p.ID, p.Name, p.DOB
FROM  Person p
WHERE p.ID
          IN (SELECT s.StudentID
          FROM Student s)
AND
         p.DOB 
           IN (SELECT MAX(DOB) 
           FROM Person);

//Item 20: Find the IDs, DOB, AND Names of nonstudent/nonintstructor people; 
$MySQL:> SELECT  p.ID,  p.DOB, p.Name
FROM  Person p
WHERE p.ID
          NOT IN (SELECT s.StudentID
          FROM Student s)
AND
         p.ID
          NOT  IN (SELECT i.InstructorID
           FROM Instructor i);

//Item 21: list each instructor AND the number of students mentored by him or her;

$MySQL:> 
SELECT   p.Name, count(*)
FROM      Student s, Person p
WHERE    s.MentorID = any ( 
	SELECT i.InstructorID
	FROM Instructor i)
        AND
                s.MentorID = p.ID
GROUP BY p.name;

//Item 22: list each classification level, the number of students belonging to it, AND their current GPA;

$MySQL:> 
SELECT  s.Classification, Count(*) as NumberOfStudents, Avg(GPA)
FROM      Student s
GROUP BY s.Classification;

//Item 23: list the cours(es) with the lowest enrollement, AND report how many students are enrolled;

$MySQL:> 
	SELECT cc as CourseCode, minenrolled as NumerOfStudentsEnrolled
	FROM (
	SELECT  *, min(enrolled) as minenrolled FROM (
SELECT Count(c.CourseCode) as enrolled, c.CourseCode
	FROM Course c
	inner join Enrollment e
	WHERE c.CourseCode = e.CourseCode 
group by c.CourseCode) x
	inner join (SELECT Count(d.CourseCode) as counted, d.CourseCode as courseco
	FROM Course d
	inner join Enrollment e
	WHERE d.CourseCode = e.CourseCode 
group by d.CourseCode)  a 

WHERE enrolled = counted) qq

	cross join (SELECT Count(c.CourseCode) as counted2, c.CourseCode as cc
	FROM Course c
	inner join Enrollment e
	WHERE c.CourseCode = e.CourseCode 
group by c.CourseCode) yy

WHERE minenrolled = counted2;
	

//item 24 FROM Student Table, offering table enrollment table, return the student ID AND mentor ID of the student if there is a coursecode AND section nomber WHERE the instructor FROM offering is the mentorid AND the studentid is found for the same course in enrollment;

$MySQL:> SELECT s.StudentId, s.MentorID
	FROM Student s
	    inner join Offering o
                                    on s.MentorID = o.InstructorID
                                 inner join Enrollment e 
                                   on s.StudentID = e.StudentID

                             WHERE e.CourseCode = o.CourseCode AND e.SectionNo = o.SectionNo ;

//Item 25: list the studentID, name AND credits comleted of each Freshman born in or after 1976;

$MySQL:>  SELECT s.StudentID, p.Name, s.CreditHours
    FROM Student s, Person p
    WHERE s.StudentID = p.ID AND s.Classification = "freshman" AND Year(p.DOB) >= 1976;


//Item 26: Insert Student: Jason Briggs;
$MySQL:> INSERT INTO 
Person (Name, ID, Address, DOB)
values ("Briggs Jason", "480293439", "215, North Hyland Avenue", "1975-01-15 00:00:00"); 


$MySQL:> INSERT INTO 
Student (StudentID, Classification, GPA, MentorID, CreditHours)
values ("480293439", "Junior", "3.48",  "201586985", "75"); 

$MySQL:> INSERT INTO 
Enrollment (CourseCode, SectionNo, StudentID, Grade )
values ("CS311", "2", "480293439", "A"); 

$MySQL:> INSERT INTO 
Enrollment (CourseCode, SectionNo, StudentID, Grade )
values ("CS330", "1", "480293439", "A-"); 

$MySQL:> SELECT *
	FROM Person p
	WHERE p.Name = "Briggs Jason";

$MySQL:> SELECT *
	FROM Student s
	WHERE s.StudentID = "480293439";

$MySQL:> SELECT *
	FROM Enrollment e
	WHERE e.StudentID = "480293439";



//item 27 Delete the low-achievers;
$MySQL:> DELETE e
    FROM Enrollment e
    WHERE e.StudentID IN (SELECT s.StudentID
	FROM Student s
	WHERE s.GPA < .5);

$MySQL:> DELETE s
    FROM Student s
   WHERE s.GPA < .5;

$MySQL:> SELECT *
    FROM  Student s 
    WHERE s.GPA < .5;


          
$MySQL:>  SELECT p.Name, i.Salary
                    FROM Instructor i, Person p
                   WHERE i.InstructorID = p.ID
            AND  p.Name = "Ricky Ponting";

          
$MySQL:>  SELECT p.Name, i.Salary
                      FROM Instructor i, Person p
                     WHERE i.InstructorID = p.ID
                        AND  p.Name = "Darren Lehmann";


$MySQL:>
 Set @numOfPontingMentees = (SELECT  count(s.MentorID) 
	FROM Student s
	WHERE s.GPA > 3.0 AND s.MentorID = any (SELECT p.ID 
			FROM Person p 
			WHERE p.Name = "Ricky Ponting") 
	group by s.MentorID);
$MySQL:>
 Set @numOfLehmannMentees = (SELECT  count(s.MentorID) 
	FROM Student s
	WHERE s.GPA > 3.0 AND s.MentorID = any (SELECT p.ID 
			FROM Person p 
			WHERE p.Name = "Darren Lehmann") 
	group by s.MentorID);

$MySQL:> UPDATE 
	Instructor i 
	Set i.Salary = CASE
	WHEN @numOfPontingMentees >= 5 Then i.Salary + (i.Salary * .1) 
	ELSE i.Salary
	END
	WHERE i.InstructorID = any (SELECT p.ID 
			FROM Person p 
			WHERE p.Name = "Ricky Ponting") ;
$MySQL:> UPDATE 
	Instructor i 
	Set i.Salary = CASE
	WHEN @numOfLehmannMentees >= 5 Then i.Salary + (i.Salary * .1) 
	ELSE i.Salary
	END
	WHERE i.InstructorID = any (SELECT p.ID 
			FROM Person p 
			WHERE p.Name = "Darren Lehmann") ;


$MySQL:>  SELECT p.Name, i.Salary
                    FROM Instructor i, Person p
                   WHERE i.InstructorID = p.ID
            AND  p.Name = "Ricky Ponting";

          
$MySQL:>  SELECT p.Name, i.Salary
                      FROM Instructor i, Person p
                     WHERE i.InstructorID = p.ID
                        AND  p.Name = "Darren Lehmann";


//Item 29 insert new person Trevor Horns
$MySQL:> INSERT INTO 
Person (Name, ID, Address, DOB)
values ("Trevor Horns", "000957303", "23 Canberra Street", "1964-11-23 00:00:00"); 

$MySQL:> SELECT *
	FROM Person P
	WHERE P.Name = "Trevor Horns";

//Item 30: delete Jan austin 

$MySQL:> DELETE e
    FROM Enrollment e
    WHERE e.StudentID IN (SELECT p.ID
	FROM Person p
	WHERE p.Name = "Jan Austin");

$MySQL:> DELETE s
    FROM Student s
   WHERE s.StudentID in (SELECT p.ID
	FROM Person p
	WHERE p.Name = "Jan Austin");

$MySQL:> DELETE P
	FROM Person P
	WHERE P.Name = "Jan Austin";

$MySQL:> select *
	FROM Person P
	WHERE P.Name = "Jan Austin";


$MySQL:> disconnect;
